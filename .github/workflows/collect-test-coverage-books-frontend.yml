name: 'Collect Test Coverage books-frontend'

on:
  issue_comment:
    types:
      - created
      - edited

env:
  NODE_VERSION: 18

defaults:
  run:
    working-directory: 'frontends/'

jobs:
  collect-test-coverage:
    name: 'Collect Test Coverage'
    if: ${{ github.event.issue.pull_request && contains(github.event.comment.body, '!!books-frontend coverage') }}
    runs-on: ubuntu-latest
    steps:
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Find PR Head
        uses: actions/github-script@v6
        id: find-pr
        with:
          result-encoding: string
          script: |
            const { data } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            return data.head.ref;

      - name: Checkout Current Branch
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.find-pr.outputs.result }}

      - name: Install Dependencies
        run: yarn install

      - name: Run Test Code On Current Branch
        run: yarn test --coverage --coverage-reporters=json-summary

      - name: Save Current Test Coverage
        id: current
        run: |
          echo "statements_total=$(cat coverage/coverage-summary.json | jq '.total.statements.total')" >> $GITHUB_OUTPUT
          echo "statements_covered=$(cat coverage/coverage-summary.json | jq '.total.statements.covered')" >> $GITHUB_OUTPUT
          echo "statements_pct=$(cat coverage/coverage-summary.json | jq '.total.statements.pct')" >> $GITHUB_OUTPUT
          echo "branches_total=$(cat coverage/coverage-summary.json | jq '.total.branches.total')" >> $GITHUB_OUTPUT
          echo "branches_covered=$(cat coverage/coverage-summary.json | jq '.total.branches.covered')" >> $GITHUB_OUTPUT
          echo "branches_pct=$(cat coverage/coverage-summary.json | jq '.total.branches.pct')" >> $GITHUB_OUTPUT
          echo "functions_total=$(cat coverage/coverage-summary.json | jq '.total.functions.total')" >> $GITHUB_OUTPUT
          echo "functions_covered=$(cat coverage/coverage-summary.json | jq '.total.functions.covered')" >> $GITHUB_OUTPUT
          echo "functions_pct=$(cat coverage/coverage-summary.json | jq '.total.functions.pct')" >> $GITHUB_OUTPUT
          echo "lines_total=$(cat coverage/coverage-summary.json | jq '.total.lines.total')" >> $GITHUB_OUTPUT
          echo "lines_covered=$(cat coverage/coverage-summary.json | jq '.total.lines.covered')" >> $GITHUB_OUTPUT
          echo "lines_pct=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')" >> $GITHUB_OUTPUT

      - name: Find PR Base 
        uses: actions/github-script@v6
        id: find-base
        with:
          result-encoding: string
          script: |
            const { data } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            return data.base.ref;
      
      - name: Find Common Ancestor Commit Hash
        id: find-common-ancestor
        run: echo "common_ancestor=$(git merge-base {{ steps.find-base.outputs.result }} {{ steps.find-pr.outputs.result }})" >> $GITHUB_OUTPUT

      - name: Checkout Common Ancestor
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.find-common-ancestor.outputs.common_ancestor }}

      - name: Install Dependencies
        run: yarn install

      - name: Run Test Code On Base Branch
        run: yarn test --coverage --coverage-reporters=json-summary

      - name: Save Base Test Coverage
        id: base
        run: |
          echo "statements_total=$(cat coverage/coverage-summary.json | jq '.total.statements.total')" >> $GITHUB_OUTPUT
          echo "statements_covered=$(cat coverage/coverage-summary.json | jq '.total.statements.covered')" >> $GITHUB_OUTPUT
          echo "statements_pct=$(cat coverage/coverage-summary.json | jq '.total.statements.pct')" >> $GITHUB_OUTPUT
          echo "branches_total=$(cat coverage/coverage-summary.json | jq '.total.branches.total')" >> $GITHUB_OUTPUT
          echo "branches_covered=$(cat coverage/coverage-summary.json | jq '.total.branches.covered')" >> $GITHUB_OUTPUT
          echo "branches_pct=$(cat coverage/coverage-summary.json | jq '.total.branches.pct')" >> $GITHUB_OUTPUT
          echo "functions_total=$(cat coverage/coverage-summary.json | jq '.total.functions.total')" >> $GITHUB_OUTPUT
          echo "functions_covered=$(cat coverage/coverage-summary.json | jq '.total.functions.covered')" >> $GITHUB_OUTPUT
          echo "functions_pct=$(cat coverage/coverage-summary.json | jq '.total.functions.pct')" >> $GITHUB_OUTPUT
          echo "lines_total=$(cat coverage/coverage-summary.json | jq '.total.lines.total')" >> $GITHUB_OUTPUT
          echo "lines_covered=$(cat coverage/coverage-summary.json | jq '.total.lines.covered')" >> $GITHUB_OUTPUT
          echo "lines_pct=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')" >> $GITHUB_OUTPUT

      - name: Create Coverage Comment
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            const base_coverage = (
              ${{ steps.base.outputs.statements_pct }} +
              ${{ steps.base.outputs.branches_pct }} +
              ${{ steps.base.outputs.functions_pct }} +
              ${{ steps.base.outputs.lines_pct }}
            ) / 4
            const current_coverage = (
              ${{ steps.current.outputs.statements_pct }} +
              ${{ steps.current.outputs.branches_pct }} +
              ${{ steps.current.outputs.functions_pct }} +
              ${{ steps.current.outputs.lines_pct }}
            ) / 4
            const increase_ratio = current_coverage - base_coverage

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `${ base_coverage }% -> ${ current_coverage }%(**${ increase_ratio }% 상승**)\n\n` + 
                `수정 전: ${ base_coverage }%\n` + 
                `\`\`\`\n` + 
                `=============================== Coverage summary ===============================\n` +
                `Statements   : ${{ steps.base.outputs.statements_pct }}% ( ${{ steps.base.outputs.statements_covered }}/${{ steps.base.outputs.statements_total }} )\n` +
                `Branches     : ${{ steps.base.outputs.branches_pct }}% ( ${{ steps.base.outputs.branches_covered }}/${{ steps.base.outputs.branches_total }} )\n` +
                `Functions    : ${{ steps.base.outputs.functions_pct }}% ( ${{ steps.base.outputs.functions_covered }}/${{ steps.base.outputs.functions_total }} )\n` +
                `Lines        : ${{ steps.base.outputs.lines_pct }}% ( ${{ steps.base.outputs.lines_covered }}/${{ steps.base.outputs.lines_total }} )\n` +
                `================================================================================\n` +
                `\`\`\`\n\n` +
                `수정 후: ${ current_coverage }%\n` +
                `\`\`\`\n` +
                `=============================== Coverage summary ===============================\n` +
                `Statements   : ${{ steps.current.outputs.statements_pct }}% ( ${{ steps.current.outputs.statements_covered }}/${{ steps.current.outputs.statements_total }} )\n` +
                `Branches     : ${{ steps.current.outputs.branches_pct }}% ( ${{ steps.current.outputs.branches_covered }}/${{ steps.current.outputs.branches_total }} )\n` +
                `Functions    : ${{ steps.current.outputs.functions_pct }}% ( ${{ steps.current.outputs.functions_covered }}/${{ steps.current.outputs.functions_total }} )\n` +
                `Lines        : ${{ steps.current.outputs.lines_pct }}% ( ${{ steps.current.outputs.lines_covered }}/${{ steps.current.outputs.lines_total }} )\n` +
                `================================================================================\n` +
                `\`\`\``
              })
